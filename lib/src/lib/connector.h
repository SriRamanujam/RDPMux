/*
 * Generated by gdbus-codegen 2.46.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __DBUS_CONNECTOR_H__
#define __DBUS_CONNECTOR_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define MUX_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES (mux_org_freedesktop_dbus_properties_get_type ())
#define MUX_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, MuxOrgFreedesktopDBusProperties))
#define MUX_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES))
#define MUX_ORG_FREEDESKTOP_DBUS_PROPERTIES_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, MuxOrgFreedesktopDBusPropertiesIface))

struct _MuxOrgFreedesktopDBusProperties;
typedef struct _MuxOrgFreedesktopDBusProperties MuxOrgFreedesktopDBusProperties;
typedef struct _MuxOrgFreedesktopDBusPropertiesIface MuxOrgFreedesktopDBusPropertiesIface;

struct _MuxOrgFreedesktopDBusPropertiesIface
{
    GTypeInterface parent_iface;


    gboolean (*handle_get) (
            MuxOrgFreedesktopDBusProperties *object,
            GDBusMethodInvocation *invocation,
            const gchar *arg_interface_name,
            const gchar *arg_property_name);

    gboolean (*handle_get_all) (
            MuxOrgFreedesktopDBusProperties *object,
            GDBusMethodInvocation *invocation,
            const gchar *arg_interface_name);

    gboolean (*handle_set) (
            MuxOrgFreedesktopDBusProperties *object,
            GDBusMethodInvocation *invocation,
            const gchar *arg_interface_name,
            const gchar *arg_property_name,
            GVariant *arg_value);

    void (*properties_changed) (
            MuxOrgFreedesktopDBusProperties *object,
            const gchar *arg_interface_name,
            GVariant *arg_changed_properties,
            const gchar *const *arg_invalidated_properties);

};

GType mux_org_freedesktop_dbus_properties_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *mux_org_freedesktop_dbus_properties_interface_info (void);
guint mux_org_freedesktop_dbus_properties_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void mux_org_freedesktop_dbus_properties_complete_get (
        MuxOrgFreedesktopDBusProperties *object,
        GDBusMethodInvocation *invocation,
        GVariant *value);

void mux_org_freedesktop_dbus_properties_complete_get_all (
        MuxOrgFreedesktopDBusProperties *object,
        GDBusMethodInvocation *invocation,
        GVariant *properties);

void mux_org_freedesktop_dbus_properties_complete_set (
        MuxOrgFreedesktopDBusProperties *object,
        GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void mux_org_freedesktop_dbus_properties_emit_properties_changed (
        MuxOrgFreedesktopDBusProperties *object,
        const gchar *arg_interface_name,
        GVariant *arg_changed_properties,
        const gchar *const *arg_invalidated_properties);



/* D-Bus method calls: */
void mux_org_freedesktop_dbus_properties_call_get (
        MuxOrgFreedesktopDBusProperties *proxy,
        const gchar *arg_interface_name,
        const gchar *arg_property_name,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);

gboolean mux_org_freedesktop_dbus_properties_call_get_finish (
        MuxOrgFreedesktopDBusProperties *proxy,
        GVariant **out_value,
        GAsyncResult *res,
        GError **error);

gboolean mux_org_freedesktop_dbus_properties_call_get_sync (
        MuxOrgFreedesktopDBusProperties *proxy,
        const gchar *arg_interface_name,
        const gchar *arg_property_name,
        GVariant **out_value,
        GCancellable *cancellable,
        GError **error);

void mux_org_freedesktop_dbus_properties_call_get_all (
        MuxOrgFreedesktopDBusProperties *proxy,
        const gchar *arg_interface_name,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);

gboolean mux_org_freedesktop_dbus_properties_call_get_all_finish (
        MuxOrgFreedesktopDBusProperties *proxy,
        GVariant **out_properties,
        GAsyncResult *res,
        GError **error);

gboolean mux_org_freedesktop_dbus_properties_call_get_all_sync (
        MuxOrgFreedesktopDBusProperties *proxy,
        const gchar *arg_interface_name,
        GVariant **out_properties,
        GCancellable *cancellable,
        GError **error);

void mux_org_freedesktop_dbus_properties_call_set (
        MuxOrgFreedesktopDBusProperties *proxy,
        const gchar *arg_interface_name,
        const gchar *arg_property_name,
        GVariant *arg_value,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);

gboolean mux_org_freedesktop_dbus_properties_call_set_finish (
        MuxOrgFreedesktopDBusProperties *proxy,
        GAsyncResult *res,
        GError **error);

gboolean mux_org_freedesktop_dbus_properties_call_set_sync (
        MuxOrgFreedesktopDBusProperties *proxy,
        const gchar *arg_interface_name,
        const gchar *arg_property_name,
        GVariant *arg_value,
        GCancellable *cancellable,
        GError **error);



/* ---- */

#define MUX_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY (mux_org_freedesktop_dbus_properties_proxy_get_type ())
#define MUX_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, MuxOrgFreedesktopDBusPropertiesProxy))
#define MUX_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, MuxOrgFreedesktopDBusPropertiesProxyClass))
#define MUX_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, MuxOrgFreedesktopDBusPropertiesProxyClass))
#define MUX_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))
#define MUX_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))

typedef struct _MuxOrgFreedesktopDBusPropertiesProxy MuxOrgFreedesktopDBusPropertiesProxy;
typedef struct _MuxOrgFreedesktopDBusPropertiesProxyClass MuxOrgFreedesktopDBusPropertiesProxyClass;
typedef struct _MuxOrgFreedesktopDBusPropertiesProxyPrivate MuxOrgFreedesktopDBusPropertiesProxyPrivate;

struct _MuxOrgFreedesktopDBusPropertiesProxy
{
    /*< private >*/
    GDBusProxy parent_instance;
    MuxOrgFreedesktopDBusPropertiesProxyPrivate *priv;
};

struct _MuxOrgFreedesktopDBusPropertiesProxyClass
{
    GDBusProxyClass parent_class;
};

GType mux_org_freedesktop_dbus_properties_proxy_get_type (void) G_GNUC_CONST;

void mux_org_freedesktop_dbus_properties_proxy_new (
        GDBusConnection     *connection,
        GDBusProxyFlags      flags,
        const gchar         *name,
        const gchar         *object_path,
        GCancellable        *cancellable,
        GAsyncReadyCallback  callback,
        gpointer             user_data);
MuxOrgFreedesktopDBusProperties *mux_org_freedesktop_dbus_properties_proxy_new_finish (
        GAsyncResult        *res,
        GError             **error);
MuxOrgFreedesktopDBusProperties *mux_org_freedesktop_dbus_properties_proxy_new_sync (
        GDBusConnection     *connection,
        GDBusProxyFlags      flags,
        const gchar         *name,
        const gchar         *object_path,
        GCancellable        *cancellable,
        GError             **error);

void mux_org_freedesktop_dbus_properties_proxy_new_for_bus (
        GBusType             bus_type,
        GDBusProxyFlags      flags,
        const gchar         *name,
        const gchar         *object_path,
        GCancellable        *cancellable,
        GAsyncReadyCallback  callback,
        gpointer             user_data);
MuxOrgFreedesktopDBusProperties *mux_org_freedesktop_dbus_properties_proxy_new_for_bus_finish (
        GAsyncResult        *res,
        GError             **error);
MuxOrgFreedesktopDBusProperties *mux_org_freedesktop_dbus_properties_proxy_new_for_bus_sync (
        GBusType             bus_type,
        GDBusProxyFlags      flags,
        const gchar         *name,
        const gchar         *object_path,
        GCancellable        *cancellable,
        GError             **error);


/* ---- */

#define MUX_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (mux_org_freedesktop_dbus_properties_skeleton_get_type ())
#define MUX_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, MuxOrgFreedesktopDBusPropertiesSkeleton))
#define MUX_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, MuxOrgFreedesktopDBusPropertiesSkeletonClass))
#define MUX_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, MuxOrgFreedesktopDBusPropertiesSkeletonClass))
#define MUX_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))
#define MUX_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))

typedef struct _MuxOrgFreedesktopDBusPropertiesSkeleton MuxOrgFreedesktopDBusPropertiesSkeleton;
typedef struct _MuxOrgFreedesktopDBusPropertiesSkeletonClass MuxOrgFreedesktopDBusPropertiesSkeletonClass;
typedef struct _MuxOrgFreedesktopDBusPropertiesSkeletonPrivate MuxOrgFreedesktopDBusPropertiesSkeletonPrivate;

struct _MuxOrgFreedesktopDBusPropertiesSkeleton
{
    /*< private >*/
    GDBusInterfaceSkeleton parent_instance;
    MuxOrgFreedesktopDBusPropertiesSkeletonPrivate *priv;
};

struct _MuxOrgFreedesktopDBusPropertiesSkeletonClass
{
    GDBusInterfaceSkeletonClass parent_class;
};

GType mux_org_freedesktop_dbus_properties_skeleton_get_type (void) G_GNUC_CONST;

MuxOrgFreedesktopDBusProperties *mux_org_freedesktop_dbus_properties_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Introspectable */

#define MUX_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE (mux_org_freedesktop_dbus_introspectable_get_type ())
#define MUX_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, MuxOrgFreedesktopDBusIntrospectable))
#define MUX_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE))
#define MUX_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, MuxOrgFreedesktopDBusIntrospectableIface))

struct _MuxOrgFreedesktopDBusIntrospectable;
typedef struct _MuxOrgFreedesktopDBusIntrospectable MuxOrgFreedesktopDBusIntrospectable;
typedef struct _MuxOrgFreedesktopDBusIntrospectableIface MuxOrgFreedesktopDBusIntrospectableIface;

struct _MuxOrgFreedesktopDBusIntrospectableIface
{
    GTypeInterface parent_iface;

    gboolean (*handle_introspect) (
            MuxOrgFreedesktopDBusIntrospectable *object,
            GDBusMethodInvocation *invocation);

};

GType mux_org_freedesktop_dbus_introspectable_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *mux_org_freedesktop_dbus_introspectable_interface_info (void);
guint mux_org_freedesktop_dbus_introspectable_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void mux_org_freedesktop_dbus_introspectable_complete_introspect (
        MuxOrgFreedesktopDBusIntrospectable *object,
        GDBusMethodInvocation *invocation,
        const gchar *xml_data);



/* D-Bus method calls: */
void mux_org_freedesktop_dbus_introspectable_call_introspect (
        MuxOrgFreedesktopDBusIntrospectable *proxy,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);

gboolean mux_org_freedesktop_dbus_introspectable_call_introspect_finish (
        MuxOrgFreedesktopDBusIntrospectable *proxy,
        gchar **out_xml_data,
        GAsyncResult *res,
        GError **error);

gboolean mux_org_freedesktop_dbus_introspectable_call_introspect_sync (
        MuxOrgFreedesktopDBusIntrospectable *proxy,
        gchar **out_xml_data,
        GCancellable *cancellable,
        GError **error);



/* ---- */

#define MUX_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY (mux_org_freedesktop_dbus_introspectable_proxy_get_type ())
#define MUX_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, MuxOrgFreedesktopDBusIntrospectableProxy))
#define MUX_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MUX_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, MuxOrgFreedesktopDBusIntrospectableProxyClass))
#define MUX_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, MuxOrgFreedesktopDBusIntrospectableProxyClass))
#define MUX_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))
#define MUX_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MUX_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))

typedef struct _MuxOrgFreedesktopDBusIntrospectableProxy MuxOrgFreedesktopDBusIntrospectableProxy;
typedef struct _MuxOrgFreedesktopDBusIntrospectableProxyClass MuxOrgFreedesktopDBusIntrospectableProxyClass;
typedef struct _MuxOrgFreedesktopDBusIntrospectableProxyPrivate MuxOrgFreedesktopDBusIntrospectableProxyPrivate;

struct _MuxOrgFreedesktopDBusIntrospectableProxy
{
    /*< private >*/
    GDBusProxy parent_instance;
    MuxOrgFreedesktopDBusIntrospectableProxyPrivate *priv;
};

struct _MuxOrgFreedesktopDBusIntrospectableProxyClass
{
    GDBusProxyClass parent_class;
};

GType mux_org_freedesktop_dbus_introspectable_proxy_get_type (void) G_GNUC_CONST;

void mux_org_freedesktop_dbus_introspectable_proxy_new (
        GDBusConnection     *connection,
        GDBusProxyFlags      flags,
        const gchar         *name,
        const gchar         *object_path,
        GCancellable        *cancellable,
        GAsyncReadyCallback  callback,
        gpointer             user_data);
MuxOrgFreedesktopDBusIntrospectable *mux_org_freedesktop_dbus_introspectable_proxy_new_finish (
        GAsyncResult        *res,
        GError             **error);
MuxOrgFreedesktopDBusIntrospectable *mux_org_freedesktop_dbus_introspectable_proxy_new_sync (
        GDBusConnection     *connection,
        GDBusProxyFlags      flags,
        const gchar         *name,
        const gchar         *object_path,
        GCancellable        *cancellable,
        GError             **error);

void mux_org_freedesktop_dbus_introspectable_proxy_new_for_bus (
        GBusType             bus_type,
        GDBusProxyFlags      flags,
        const gchar         *name,
        const gchar         *object_path,
        GCancellable        *cancellable,
        GAsyncReadyCallback  callback,
        gpointer             user_data);
MuxOrgFreedesktopDBusIntrospectable *mux_org_freedesktop_dbus_introspectable_proxy_new_for_bus_finish (
        GAsyncResult        *res,
        GError             **error);
MuxOrgFreedesktopDBusIntrospectable *mux_org_freedesktop_dbus_introspectable_proxy_new_for_bus_sync (
        GBusType             bus_type,
        GDBusProxyFlags      flags,
        const gchar         *name,
        const gchar         *object_path,
        GCancellable        *cancellable,
        GError             **error);


/* ---- */

#define MUX_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON (mux_org_freedesktop_dbus_introspectable_skeleton_get_type ())
#define MUX_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, MuxOrgFreedesktopDBusIntrospectableSkeleton))
#define MUX_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MUX_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, MuxOrgFreedesktopDBusIntrospectableSkeletonClass))
#define MUX_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, MuxOrgFreedesktopDBusIntrospectableSkeletonClass))
#define MUX_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))
#define MUX_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MUX_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))

typedef struct _MuxOrgFreedesktopDBusIntrospectableSkeleton MuxOrgFreedesktopDBusIntrospectableSkeleton;
typedef struct _MuxOrgFreedesktopDBusIntrospectableSkeletonClass MuxOrgFreedesktopDBusIntrospectableSkeletonClass;
typedef struct _MuxOrgFreedesktopDBusIntrospectableSkeletonPrivate MuxOrgFreedesktopDBusIntrospectableSkeletonPrivate;

struct _MuxOrgFreedesktopDBusIntrospectableSkeleton
{
    /*< private >*/
    GDBusInterfaceSkeleton parent_instance;
    MuxOrgFreedesktopDBusIntrospectableSkeletonPrivate *priv;
};

struct _MuxOrgFreedesktopDBusIntrospectableSkeletonClass
{
    GDBusInterfaceSkeletonClass parent_class;
};

GType mux_org_freedesktop_dbus_introspectable_skeleton_get_type (void) G_GNUC_CONST;

MuxOrgFreedesktopDBusIntrospectable *mux_org_freedesktop_dbus_introspectable_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Peer */

#define MUX_TYPE_ORG_FREEDESKTOP_DBUS_PEER (mux_org_freedesktop_dbus_peer_get_type ())
#define MUX_ORG_FREEDESKTOP_DBUS_PEER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PEER, MuxOrgFreedesktopDBusPeer))
#define MUX_IS_ORG_FREEDESKTOP_DBUS_PEER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PEER))
#define MUX_ORG_FREEDESKTOP_DBUS_PEER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PEER, MuxOrgFreedesktopDBusPeerIface))

struct _MuxOrgFreedesktopDBusPeer;
typedef struct _MuxOrgFreedesktopDBusPeer MuxOrgFreedesktopDBusPeer;
typedef struct _MuxOrgFreedesktopDBusPeerIface MuxOrgFreedesktopDBusPeerIface;

struct _MuxOrgFreedesktopDBusPeerIface
{
    GTypeInterface parent_iface;

    gboolean (*handle_get_machine_id) (
            MuxOrgFreedesktopDBusPeer *object,
            GDBusMethodInvocation *invocation);

    gboolean (*handle_ping) (
            MuxOrgFreedesktopDBusPeer *object,
            GDBusMethodInvocation *invocation);

};

GType mux_org_freedesktop_dbus_peer_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *mux_org_freedesktop_dbus_peer_interface_info (void);
guint mux_org_freedesktop_dbus_peer_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void mux_org_freedesktop_dbus_peer_complete_ping (
        MuxOrgFreedesktopDBusPeer *object,
        GDBusMethodInvocation *invocation);

void mux_org_freedesktop_dbus_peer_complete_get_machine_id (
        MuxOrgFreedesktopDBusPeer *object,
        GDBusMethodInvocation *invocation,
        const gchar *machine_uuid);



/* D-Bus method calls: */
void mux_org_freedesktop_dbus_peer_call_ping (
        MuxOrgFreedesktopDBusPeer *proxy,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);

gboolean mux_org_freedesktop_dbus_peer_call_ping_finish (
        MuxOrgFreedesktopDBusPeer *proxy,
        GAsyncResult *res,
        GError **error);

gboolean mux_org_freedesktop_dbus_peer_call_ping_sync (
        MuxOrgFreedesktopDBusPeer *proxy,
        GCancellable *cancellable,
        GError **error);

void mux_org_freedesktop_dbus_peer_call_get_machine_id (
        MuxOrgFreedesktopDBusPeer *proxy,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);

gboolean mux_org_freedesktop_dbus_peer_call_get_machine_id_finish (
        MuxOrgFreedesktopDBusPeer *proxy,
        gchar **out_machine_uuid,
        GAsyncResult *res,
        GError **error);

gboolean mux_org_freedesktop_dbus_peer_call_get_machine_id_sync (
        MuxOrgFreedesktopDBusPeer *proxy,
        gchar **out_machine_uuid,
        GCancellable *cancellable,
        GError **error);



/* ---- */

#define MUX_TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY (mux_org_freedesktop_dbus_peer_proxy_get_type ())
#define MUX_ORG_FREEDESKTOP_DBUS_PEER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY, MuxOrgFreedesktopDBusPeerProxy))
#define MUX_ORG_FREEDESKTOP_DBUS_PEER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY, MuxOrgFreedesktopDBusPeerProxyClass))
#define MUX_ORG_FREEDESKTOP_DBUS_PEER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY, MuxOrgFreedesktopDBusPeerProxyClass))
#define MUX_IS_ORG_FREEDESKTOP_DBUS_PEER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY))
#define MUX_IS_ORG_FREEDESKTOP_DBUS_PEER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY))

typedef struct _MuxOrgFreedesktopDBusPeerProxy MuxOrgFreedesktopDBusPeerProxy;
typedef struct _MuxOrgFreedesktopDBusPeerProxyClass MuxOrgFreedesktopDBusPeerProxyClass;
typedef struct _MuxOrgFreedesktopDBusPeerProxyPrivate MuxOrgFreedesktopDBusPeerProxyPrivate;

struct _MuxOrgFreedesktopDBusPeerProxy
{
    /*< private >*/
    GDBusProxy parent_instance;
    MuxOrgFreedesktopDBusPeerProxyPrivate *priv;
};

struct _MuxOrgFreedesktopDBusPeerProxyClass
{
    GDBusProxyClass parent_class;
};

GType mux_org_freedesktop_dbus_peer_proxy_get_type (void) G_GNUC_CONST;

void mux_org_freedesktop_dbus_peer_proxy_new (
        GDBusConnection     *connection,
        GDBusProxyFlags      flags,
        const gchar         *name,
        const gchar         *object_path,
        GCancellable        *cancellable,
        GAsyncReadyCallback  callback,
        gpointer             user_data);
MuxOrgFreedesktopDBusPeer *mux_org_freedesktop_dbus_peer_proxy_new_finish (
        GAsyncResult        *res,
        GError             **error);
MuxOrgFreedesktopDBusPeer *mux_org_freedesktop_dbus_peer_proxy_new_sync (
        GDBusConnection     *connection,
        GDBusProxyFlags      flags,
        const gchar         *name,
        const gchar         *object_path,
        GCancellable        *cancellable,
        GError             **error);

void mux_org_freedesktop_dbus_peer_proxy_new_for_bus (
        GBusType             bus_type,
        GDBusProxyFlags      flags,
        const gchar         *name,
        const gchar         *object_path,
        GCancellable        *cancellable,
        GAsyncReadyCallback  callback,
        gpointer             user_data);
MuxOrgFreedesktopDBusPeer *mux_org_freedesktop_dbus_peer_proxy_new_for_bus_finish (
        GAsyncResult        *res,
        GError             **error);
MuxOrgFreedesktopDBusPeer *mux_org_freedesktop_dbus_peer_proxy_new_for_bus_sync (
        GBusType             bus_type,
        GDBusProxyFlags      flags,
        const gchar         *name,
        const gchar         *object_path,
        GCancellable        *cancellable,
        GError             **error);


/* ---- */

#define MUX_TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON (mux_org_freedesktop_dbus_peer_skeleton_get_type ())
#define MUX_ORG_FREEDESKTOP_DBUS_PEER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON, MuxOrgFreedesktopDBusPeerSkeleton))
#define MUX_ORG_FREEDESKTOP_DBUS_PEER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON, MuxOrgFreedesktopDBusPeerSkeletonClass))
#define MUX_ORG_FREEDESKTOP_DBUS_PEER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON, MuxOrgFreedesktopDBusPeerSkeletonClass))
#define MUX_IS_ORG_FREEDESKTOP_DBUS_PEER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON))
#define MUX_IS_ORG_FREEDESKTOP_DBUS_PEER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MUX_TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON))

typedef struct _MuxOrgFreedesktopDBusPeerSkeleton MuxOrgFreedesktopDBusPeerSkeleton;
typedef struct _MuxOrgFreedesktopDBusPeerSkeletonClass MuxOrgFreedesktopDBusPeerSkeletonClass;
typedef struct _MuxOrgFreedesktopDBusPeerSkeletonPrivate MuxOrgFreedesktopDBusPeerSkeletonPrivate;

struct _MuxOrgFreedesktopDBusPeerSkeleton
{
    /*< private >*/
    GDBusInterfaceSkeleton parent_instance;
    MuxOrgFreedesktopDBusPeerSkeletonPrivate *priv;
};

struct _MuxOrgFreedesktopDBusPeerSkeletonClass
{
    GDBusInterfaceSkeletonClass parent_class;
};

GType mux_org_freedesktop_dbus_peer_skeleton_get_type (void) G_GNUC_CONST;

MuxOrgFreedesktopDBusPeer *mux_org_freedesktop_dbus_peer_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.RDPMux.RDPMux */

#define MUX_TYPE_ORG_RDPMUX_RDPMUX (mux_org_rdpmux_rdpmux_get_type ())
#define MUX_ORG_RDPMUX_RDPMUX(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MUX_TYPE_ORG_RDPMUX_RDPMUX, MuxOrgRDPMuxRDPMux))
#define MUX_IS_ORG_RDPMUX_RDPMUX(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MUX_TYPE_ORG_RDPMUX_RDPMUX))
#define MUX_ORG_RDPMUX_RDPMUX_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), MUX_TYPE_ORG_RDPMUX_RDPMUX, MuxOrgRDPMuxRDPMuxIface))

struct _MuxOrgRDPMuxRDPMux;
typedef struct _MuxOrgRDPMuxRDPMux MuxOrgRDPMuxRDPMux;
typedef struct _MuxOrgRDPMuxRDPMuxIface MuxOrgRDPMuxRDPMuxIface;

struct _MuxOrgRDPMuxRDPMuxIface
{
    GTypeInterface parent_iface;


    gboolean (*handle_register) (
            MuxOrgRDPMuxRDPMux *object,
            GDBusMethodInvocation *invocation,
            gint arg_id,
            gint arg_version,
            const gchar *arg_uuid);

    GVariant * (*get_supported_protocol_versions) (MuxOrgRDPMuxRDPMux *object);

};

GType mux_org_rdpmux_rdpmux_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *mux_org_rdpmux_rdpmux_interface_info (void);
guint mux_org_rdpmux_rdpmux_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void mux_org_rdpmux_rdpmux_complete_register (
        MuxOrgRDPMuxRDPMux *object,
        GDBusMethodInvocation *invocation,
        const gchar *socket_path);



/* D-Bus method calls: */
void mux_org_rdpmux_rdpmux_call_register (
        MuxOrgRDPMuxRDPMux *proxy,
        gint arg_id,
        gint arg_version,
        const gchar *arg_uuid,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);

gboolean mux_org_rdpmux_rdpmux_call_register_finish (
        MuxOrgRDPMuxRDPMux *proxy,
        gchar **out_socket_path,
        GAsyncResult *res,
        GError **error);

gboolean mux_org_rdpmux_rdpmux_call_register_sync (
        MuxOrgRDPMuxRDPMux *proxy,
        gint arg_id,
        gint arg_version,
        const gchar *arg_uuid,
        gchar **out_socket_path,
        GCancellable *cancellable,
        GError **error);



/* D-Bus property accessors: */
GVariant *mux_org_rdpmux_rdpmux_get_supported_protocol_versions (MuxOrgRDPMuxRDPMux *object);
GVariant *mux_org_rdpmux_rdpmux_dup_supported_protocol_versions (MuxOrgRDPMuxRDPMux *object);
void mux_org_rdpmux_rdpmux_set_supported_protocol_versions (MuxOrgRDPMuxRDPMux *object, GVariant *value);


/* ---- */

#define MUX_TYPE_ORG_RDPMUX_RDPMUX_PROXY (mux_org_rdpmux_rdpmux_proxy_get_type ())
#define MUX_ORG_RDPMUX_RDPMUX_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MUX_TYPE_ORG_RDPMUX_RDPMUX_PROXY, MuxOrgRDPMuxRDPMuxProxy))
#define MUX_ORG_RDPMUX_RDPMUX_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MUX_TYPE_ORG_RDPMUX_RDPMUX_PROXY, MuxOrgRDPMuxRDPMuxProxyClass))
#define MUX_ORG_RDPMUX_RDPMUX_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MUX_TYPE_ORG_RDPMUX_RDPMUX_PROXY, MuxOrgRDPMuxRDPMuxProxyClass))
#define MUX_IS_ORG_RDPMUX_RDPMUX_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MUX_TYPE_ORG_RDPMUX_RDPMUX_PROXY))
#define MUX_IS_ORG_RDPMUX_RDPMUX_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MUX_TYPE_ORG_RDPMUX_RDPMUX_PROXY))

typedef struct _MuxOrgRDPMuxRDPMuxProxy MuxOrgRDPMuxRDPMuxProxy;
typedef struct _MuxOrgRDPMuxRDPMuxProxyClass MuxOrgRDPMuxRDPMuxProxyClass;
typedef struct _MuxOrgRDPMuxRDPMuxProxyPrivate MuxOrgRDPMuxRDPMuxProxyPrivate;

struct _MuxOrgRDPMuxRDPMuxProxy
{
    /*< private >*/
    GDBusProxy parent_instance;
    MuxOrgRDPMuxRDPMuxProxyPrivate *priv;
};

struct _MuxOrgRDPMuxRDPMuxProxyClass
{
    GDBusProxyClass parent_class;
};

GType mux_org_rdpmux_rdpmux_proxy_get_type (void) G_GNUC_CONST;

void mux_org_rdpmux_rdpmux_proxy_new (
        GDBusConnection     *connection,
        GDBusProxyFlags      flags,
        const gchar         *name,
        const gchar         *object_path,
        GCancellable        *cancellable,
        GAsyncReadyCallback  callback,
        gpointer             user_data);
MuxOrgRDPMuxRDPMux *mux_org_rdpmux_rdpmux_proxy_new_finish (
        GAsyncResult        *res,
        GError             **error);
MuxOrgRDPMuxRDPMux *mux_org_rdpmux_rdpmux_proxy_new_sync (
        GDBusConnection     *connection,
        GDBusProxyFlags      flags,
        const gchar         *name,
        const gchar         *object_path,
        GCancellable        *cancellable,
        GError             **error);

void mux_org_rdpmux_rdpmux_proxy_new_for_bus (
        GBusType             bus_type,
        GDBusProxyFlags      flags,
        const gchar         *name,
        const gchar         *object_path,
        GCancellable        *cancellable,
        GAsyncReadyCallback  callback,
        gpointer             user_data);
MuxOrgRDPMuxRDPMux *mux_org_rdpmux_rdpmux_proxy_new_for_bus_finish (
        GAsyncResult        *res,
        GError             **error);
MuxOrgRDPMuxRDPMux *mux_org_rdpmux_rdpmux_proxy_new_for_bus_sync (
        GBusType             bus_type,
        GDBusProxyFlags      flags,
        const gchar         *name,
        const gchar         *object_path,
        GCancellable        *cancellable,
        GError             **error);


/* ---- */

#define MUX_TYPE_ORG_RDPMUX_RDPMUX_SKELETON (mux_org_rdpmux_rdpmux_skeleton_get_type ())
#define MUX_ORG_RDPMUX_RDPMUX_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MUX_TYPE_ORG_RDPMUX_RDPMUX_SKELETON, MuxOrgRDPMuxRDPMuxSkeleton))
#define MUX_ORG_RDPMUX_RDPMUX_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MUX_TYPE_ORG_RDPMUX_RDPMUX_SKELETON, MuxOrgRDPMuxRDPMuxSkeletonClass))
#define MUX_ORG_RDPMUX_RDPMUX_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MUX_TYPE_ORG_RDPMUX_RDPMUX_SKELETON, MuxOrgRDPMuxRDPMuxSkeletonClass))
#define MUX_IS_ORG_RDPMUX_RDPMUX_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MUX_TYPE_ORG_RDPMUX_RDPMUX_SKELETON))
#define MUX_IS_ORG_RDPMUX_RDPMUX_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MUX_TYPE_ORG_RDPMUX_RDPMUX_SKELETON))

typedef struct _MuxOrgRDPMuxRDPMuxSkeleton MuxOrgRDPMuxRDPMuxSkeleton;
typedef struct _MuxOrgRDPMuxRDPMuxSkeletonClass MuxOrgRDPMuxRDPMuxSkeletonClass;
typedef struct _MuxOrgRDPMuxRDPMuxSkeletonPrivate MuxOrgRDPMuxRDPMuxSkeletonPrivate;

struct _MuxOrgRDPMuxRDPMuxSkeleton
{
    /*< private >*/
    GDBusInterfaceSkeleton parent_instance;
    MuxOrgRDPMuxRDPMuxSkeletonPrivate *priv;
};

struct _MuxOrgRDPMuxRDPMuxSkeletonClass
{
    GDBusInterfaceSkeletonClass parent_class;
};

GType mux_org_rdpmux_rdpmux_skeleton_get_type (void) G_GNUC_CONST;

MuxOrgRDPMuxRDPMux *mux_org_rdpmux_rdpmux_skeleton_new (void);


G_END_DECLS

#endif /* __DBUS_CONNECTOR_H__ */